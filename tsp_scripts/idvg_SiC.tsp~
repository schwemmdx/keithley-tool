-- CONFIGURATION SECTION

-- idvg for cp01dev01
--Vds = 0.001
--Vbs = 0.000  --sweep(5.0, -5.0, -0.25)
--Vgs = sweep(-20, 20, 5)

-- CONFIGURATION SECTION END

node[1].reset()
node[2].reset()
--tsplink.reset()
node[1].errorqueue.clear()
node[2].errorqueue.clear()
smulist = {}

-- Init TSP Link
--tspNodesFound = tsplink.initialize(0)
--print("Nodes found = " .. tspNodesFound)


function def_smu(s, d, i, irange)
--	s = 'smu' .. s
--	d = '# ' .. d .. ' was node[' .. n .. '].' .. s
    smu = s
    table.insert(smulist, smu)
    node[1].display['smua'].measure.func = display.MEASURE_DCAMPS
    node[1].display['smub'].measure.func = display.MEASURE_DCAMPS
    node[2].display['smua'].measure.func = display.MEASURE_DCAMPS
    node[2].display['smub'].measure.func = display.MEASURE_DCAMPS

    if irange == 0 then
        smu.measure.autorangei  = smu.AUTORANGE_ON
        smu.measure.autozero    = smu.AUTOZERO_AUTO
        smu.measure.delay       = smu.DELAY_AUTO
        smu.measure.delayfactor = 1.3
    else
        smu.measure.rangei   = irange
        smu.measure.autozero = smu.AUTOZERO_ONCE
        smu.measure.delay    = smu.DELAY_OFF
    end

	smu.measure.nplc        = nplcValue
	smu.source.func         = smu.OUTPUT_DCVOLTS
	smu.source.levelv       = 0
	smu.source.autorangev   = smu.AUTORANGE_ON
	smu.source.limiti       = i

	return smu
end

function smus_on(on)
	local o = (on and smulist[1].OUTPUT_ON) or smulist[1].OUTPUT_OFF
	for i, s in pairs(smulist) do
		s.source.output = o
	end
end

--gate   = def_smu(smua, 'gate',   1e-5)
--drain  = def_smu(smub, 'drain',  1e-5)

gate   = def_smu(gateSMU,   'gate',   IgateMax,   IgateRange)
drain  = def_smu(drainSMU,  'drain',  IdrainMax,  IdrainRange)
diodeA = def_smu(diodeASMU, 'diodeA', IdiodeAMax, IdiodeARange)
diodeB = def_smu(diodeBSMU, 'diodeB', IdiodeBMax, IdiodeBRange)

function measure()
	IdiodeA = 0.
	IdiodeB = 0.
	Ig      = 0.

	if measureIdiodeA > 0 then
	   if diodeA.source.compliance then 
	      IdiodeA = 'compliance' 
              VdiodeA = IdiodeA 
	   else 
	      IdiodeA, VdiodeA = diodeA.measure.iv() 
	   end
        else
	   VdiodeA = diodeA.source.levelv
        end

	if measureIdiodeB > 0 then
	   if diodeB.source.compliance then 
	      IdiodeB = 'compliance' 
              VdiodeB = IdiodeB
	   else 
	      IdiodeB, VdiodeB = diodeA.measure.iv() 
	   end
        else
	   VdiodeB = diodeB.source.levelv
        end

	if measureIG > 0 then
	   if gate.source.compliance then 
	       Ig = 'compliance' 
	       Vg = Ig 
	   else 
	       Ig, Vg = gate.measure.iv() 
	   end
        else
	   Vg = gate.source.levelv
	end

	-- measure IDrain
	if drain.source.compliance then 
	    Id = 'compliance' 
            Vd = Id 
        else 
            Id, Vd = drain.measure.iv() 
        end

	print(Vg, Ig, Vd, Id, VdiodeA, IdiodeA, VdiodeB, IdiodeB)
end

function measureVds(Vds)
	drain.source.levelv  = Vds
	diodeA.source.levelv = VdiodeA
	diodeB.source.levelv = VdiodeB

	for _, Vgs_ in ipairs(Vgs) do
	    gate.source.levelv = Vgs_
	    measure()
	end
end

print('## startIDVG')
print('#n Vg Ig Vd Id VdiodeA IdiodeA')
smus_on(true)

measureVds(Vds) 

smus_on(false)
print('## endIDVG')

reset()

