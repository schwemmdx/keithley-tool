-- configuration loaded by python script

errorqueue.clear()
-- clear error queues
if node1_smua == 1 or node1_smub == 1 then
    node[1].errorqueue.clear()
end

if node2_smua == 1 or node2_smub == 1 then
    node[2].errorqueue.clear()	 
end

if node3_smua == 1 or node3_smub == 1 then
    node[3].errorqueue.clear()
end

smulist = {}

function def_smu(use, smu, imax, irange)
    if use == 0 then
       return nil
    end

    ---smu = name_smu
    --smu.measure.func = display.MEASURE_DCAMPS

    disp = nil
    if smu == node[1].smua then
        disp = node[1].display['smua']
--    end
    elseif smu == node[1].smub then
        disp = node[1].display['smub']
--    end
    elseif smu == node[2].smua then
        disp = node[2].display['smua']
--    end
    elseif smu == node[2].smub then
        disp = node[2].display['smub']
    end
--    if smu == node[3].smua then
--        disp = node[3].display['smua']
--    end
--    if smu == node[3].smub then
--        disp = node[3].display['smub']
--    end
    if disp then
        disp.measure.func = display.MEASURE_DCAMPS
    end

    table.insert(smulist, smu)
    
    --node[1].display['smua'].measure.func = display.MEASURE_DCAMPS
    --node[1].display['smub'].measure.func = display.MEASURE_DCAMPS
    --node[2].display['smua'].measure.func = display.MEASURE_DCAMPS
    --node[2].display['smub'].measure.func = display.MEASURE_DCAMPS
    --node[3].display['smua'].measure.func = display.MEASURE_DCAMPS
    --node[3].display['smub'].measure.func = display.MEASURE_DCAMPS

    if irange == 0 then
        smu.measure.autorangei  = smu.AUTORANGE_ON
        smu.measure.autozero    = smu.AUTOZERO_AUTO
        smu.measure.delay       = smu.DELAY_AUTO
        smu.measure.delayfactor = 1.3
    else
        smu.measure.rangei   = irange
        smu.measure.autozero = smu.AUTOZERO_ONCE
        smu.measure.delay    = smu.DELAY_OFF
    end

    smu.measure.nplc        = nplcValue
    smu.source.func         = smu.OUTPUT_DCVOLTS
    smu.source.levelv       = 0
    smu.source.autorangev   = smu.AUTORANGE_ON
    smu.source.limiti       = imax

    return smu
end

function smus_on(on)
    local o = (on and smulist[1].OUTPUT_ON) or smulist[1].OUTPUT_OFF
    for i, s in pairs(smulist) do
        s.source.output = o
    end
end

function reset_smus()
    for i, s in pairs(smulist) do
        s = nil
    end
end

function getLength(smu, use, voltage)
    len = 0
    if smu ~= nil then
        if use > 0 then
            len = table_length(voltage)
        end
    end

    return len
end

-- initialize up to six smu's
if node1_smua_use == 1 then
   node1_smua = def_smu(node1_smua_use, node[1].smua, node1_smua_IMax, node1_smua_IRange)
else
   node1_smua = nil
end
if node1_smub_use == 1 then
   node1_smub = def_smu(node1_smub_use, node[1].smub, node1_smub_IMax, node1_smub_IRange)
else
   node1_smub = nil
end

if node2_smua_use == 1 then
   node2_smua = def_smu(node2_smua_use, node[2].smua, node2_smua_IMax, node2_smua_IRange)
else
   node2_smua = nil
end
if node2_smub_use == 1 then
   node2_smub = def_smu(node2_smub_use, node[2].smub, node2_smub_IMax, node2_smub_IRange)
else
   node2_smub = nil
end

if node3_smua_use == 1 then
   node3_smua = def_smu(node3_smua_use, node[3].smua, node3_smua_IMax, node3_smua_IRange)
else
   node3_smua = nil
end
if node3_smub_use == 1 then
   node3_smub = def_smu(node3_smub_use, node[3].smub, node3_smub_IMax, node3_smub_IRange)
else
   node3_smub = nil
end

-- get max length of sweep array
lengthtable = {}
table.insert(lengthtable, getLength(node1_smua, node1_smua_use, node1_smua_vout))
table.insert(lengthtable, getLength(node1_smub, node1_smub_use, node1_smub_vout))
table.insert(lengthtable, getLength(node2_smua, node2_smua_use, node2_smua_vout))
table.insert(lengthtable, getLength(node2_smub, node2_smub_use, node2_smub_vout))
table.insert(lengthtable, getLength(node3_smua, node3_smua_use, node3_smua_vout))
table.insert(lengthtable, getLength(node3_smub, node3_smub_use, node3_smub_vout))
sweepLenght = math.max(unpack(lengthtable))

function getName(smu, measure, name)
    str = ' '
    if smu ~= nil then
        str = str .. 'V' .. name .. ' '
        if measure > 0 then
            str = str .. 'I' .. name .. ' '
        end
    end

    return str
end

function measureI_atSMU(smu, measure)
    V_  = 0.
    I_  = 0.
    str = ' '

    if smu ~= nil then
        if measure > 0 then
            if smu.source.compliance then 
    	    I_ = 'compliance' 
                V_ = I_ 
    	else 
    	    I_, V_ = smu.measure.iv() 
    	end
    	str = str .. V_ .. ' ' .. I_
        else
            I_ = 0.
            V_ = smu.source.levelv
    	str = str .. V_
        end
    end

    return str
end

function measure()
    if tstart < 0 then
        tstart = os.time()
    end

    str = ''  .. (os.time() - tstart)
    str = str .. measureI_atSMU(node1_smua, node1_smua_measureI)
    str = str .. measureI_atSMU(node1_smub, node1_smub_measureI)
    str = str .. measureI_atSMU(node2_smua, node2_smua_measureI)
    str = str .. measureI_atSMU(node2_smub, node2_smub_measureI)
    str = str .. measureI_atSMU(node3_smua, node3_smua_measureI)
    str = str .. measureI_atSMU(node3_smub, node3_smub_measureI)
  
    print(str)
end

--function setOutputVoltage(smu, V)
--   if smu ~= nil then
--      smu.source.levelv = V
--   end
--end

function setVoltage(smu, voltage, i)
    if smu ~= nil then
        if type(voltage) == "number" then
   	    smu.source.levelv = voltage
   	else
   	    smu.source.levelv = voltage[i]
   	end
    end
end

function setIRange(smu, irange, ilim)
    if smu ~= nil then
        smu.measure.rangei = irange
        smu.source.limiti  = ilim
    end
end

function measure_sweep()
    timeStressStop = os.time()
    if tStress > 0 then
        print('#i netStressTime=' .. timeStressStop-timeStressStart)
    end

    for i=1,sweepLenght do
    	setVoltage(node1_smua, node1_smua_vout, i)
	setVoltage(node1_smub, node1_smub_vout, i)	
	setVoltage(node2_smua, node2_smua_vout, i)
	setVoltage(node2_smub, node2_smub_vout, i)
	setVoltage(node3_smua, node3_smua_vout, i)
	setVoltage(node3_smub, node3_smub_vout, i)

        measure()
    end

    -- apply remain biases
    setVoltage(node1_smua, node1_smua_VRemain)
    setVoltage(node1_smub, node1_smub_VRemain)	
    setVoltage(node2_smua, node2_smua_VRemain)
    setVoltage(node2_smub, node2_smub_VRemain)
    setVoltage(node3_smua, node3_smua_VRemain)
    setVoltage(node3_smub, node3_smub_VRemain)
end

function apply_stress()
    -- set current ranges
    setIRange(node1_smua, node1_smua_IStressRange, node1_smua_IMax)
    setIRange(node1_smub, node1_smub_IStressRange, node1_smub_IMax)
    setIRange(node2_smua, node2_smua_IStressRange, node2_smua_IMax)
    setIRange(node2_smub, node2_smub_IStressRange, node2_smub_IMax)
    setIRange(node3_smua, node3_smua_IStressRange, node3_smua_IMax)
    setIRange(node3_smub, node3_smub_IStressRange, node3_smub_IMax)

    -- init timer
    mytimer             = trigger.timer[1]
    mytimer.count       = 1
    mytimer.passthrough = false

    -- apply stress bias
    setVoltage(node1_smua, node1_smua_VStress, 0)
    setVoltage(node1_smub, node1_smub_VStress, 0)	
    setVoltage(node2_smua, node2_smua_VStress, 0)
    setVoltage(node2_smub, node2_smub_VStress, 0)
    setVoltage(node3_smua, node3_smua_VStress, 0)
    setVoltage(node3_smub, node3_smub_VStress, 0)
    timeStressStart = os.time()

    -- wait
    mytimer.wait(tStress-0.54) -- hand calibrated

    -- set current ranges back
    setIRange(node1_smua, node1_smua_IRange, node1_smua_IMax)
    setIRange(node1_smub, node1_smub_IRange, node1_smub_IMax)
    setIRange(node2_smua, node2_smua_IRange, node2_smua_IMax)
    setIRange(node2_smub, node2_smub_IRange, node2_smub_IMax)
    setIRange(node3_smua, node3_smua_IRange, node3_smua_IMax)
    setIRange(node3_smub, node3_smub_IRange, node3_smub_IMax)
end

tstart = -1.

print('## startIDVG')
str = '#n t '
str = str .. getName(node1_smua, node1_smua_measureI, node1_smua_name)
str = str .. getName(node1_smub, node1_smub_measureI, node1_smub_name)
str = str .. getName(node2_smua, node2_smua_measureI, node2_smua_name)
str = str .. getName(node2_smub, node2_smub_measureI, node2_smub_name)
str = str .. getName(node3_smua, node3_smua_measureI, node3_smua_name)
str = str .. getName(node3_smub, node3_smub_measureI, node3_smub_name)
print(str)

smus_on(true)

-- stress cycle
timeStressStart = 0.
timeStressStop  = 0.

if tStress > 0 then
   apply_stress()
end

-- sweep
measure_sweep() 

-- set outputs floating
--smus_on(false)
if node1_smua_use == 1 then
   if node1_smua_setOutputFloating == 1 then
       node1_smua.source.output = 0
   end
end
if node1_smub_use == 1 then
   if node1_smub_setOutputFloating == 1 then
       node1_smub.source.output = 0
   end
end

if node2_smua_use == 1 then
   if node2_smua_setOutputFloating == 1 then
       node2_smua.source.output = 0
   end
end
if node2_smub_use == 1 then
   if node2_smub_setOutputFloating == 1 then
       node2_smub.source.output = 0
   end
end

if node3_smua_use == 1 then
   if node3_smua_setOutputFloating == 1 then
       node3_smua.source.output = 0
   end
end
if node3_smub_use == 1 then
   if node3_smub_setOutputFloating == 1 then
       node3_smub.source.output = 0
   end
end

print('## endIDVG')

smua.nvbuffer1.clear()
smub.nvbuffer2.clear()

--reset_smus()
--reset()

